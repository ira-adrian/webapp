<?php

namespace Siarme\ExpedienteBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TramiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TramiteRepository extends EntityRepository
{
    
/**
     * Encuentra los  TRAMITE por estado de CREDITO
     * 
     * 
     */
  public function findByCredito($estado = false)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t, cre
                        FROM ExpedienteBundle:Tramite t 
                        JOIN t.credito cre
                        WHERE cre.estado = :estado
                        AND t.estado = :estado2
                        ');
        $consulta->setParameter('estado', $estado)
                 ->setParameter('estado2', true);
        
        $tramite = $consulta->getResult();           
                 
        return $tramite;
    }
    
  /**
     * Encuentra los  TRAMITE de un DEPARTAMENTO-RM
     * 
     * 
     */
  public function findByDapartamentoRmActivo($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t
                        FROM ExpedienteBundle:Tramite t 
                        JOIN t.departamentoRm dpt
                        WHERE (t.expediente IS NULL)
                        AND t.departamentoRm = :id
                        ');
        $consulta->setParameter('id', $id);
        
        $tramite = $consulta->getResult();           
                 
        return $tramite;
    }

    /**
     * Encuentra los  TRAMITE de con RECORDATORIO del USUARIO y 
     * los que son con estado <publico>
     * 
     */
  public function findByRecordatorioUsuario($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT tra
                        FROM ExpedienteBundle:Tramite tra 
                        JOIN tra.recordatorio rec
                        WHERE rec.usuario = :id 
                        AND rec.fecha >= :fecha
                        ORDER BY rec.fecha ASC
                        ');
        $consulta->setParameter('id', $id); 
        $fecha = (new \DateTime('now'))->format('Y-m-d');
        $consulta->setParameter('fecha', $fecha);
       // $consulta->setParameter('estado', true);      
        $tramite = $consulta->getResult();           
       
        return $tramite;
    }
    
    /**
     * Encuentra los  TRAMITE de PAGOS se filtra por fecha y no por fechaDesde
     * 
     * 
     */
  public function findByDepartamentoRmPago($id, $anio = null, $slug= null)
  {
        if (empty($anio)) {
            $date = new \Datetime();
            $anio = $date->format("Y");
        }
    
        $fecha = $anio."/01/01";
        $fecha = new \DateTime($fecha);
        $fecha = $fecha->format('Y/m/d');

        $fechaHasta = $anio."/12/31";
        $fechaHasta = new \DateTime($fechaHasta);
        $fechaHasta = $fechaHasta->format('Y/m/d');

        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t
                        FROM ExpedienteBundle:Tramite t 
                        JOIN  t.tipoTramite tt
                        WHERE t.fecha >= :fecha 
                        AND t.fecha <= :fechaHasta
                        AND t.departamentoRm = :id
                        ORDER BY t.numeroTramite DESC
                        ');
        $consulta->setParameter('id', $id)
                 ->setParameter('fecha', $fecha)
                 ->setParameter('fechaHasta', $fechaHasta);
        
        $tramite = $consulta->getResult();  
      
        return $tramite;
    }
    
    /**
     * Encuentra los  TRAMITE de un DEPARTAMENTO-RM
     * 
     * 
     */
  public function findByDepartamentoRm($id, $anio = null, $slug= null)
  {
        if (empty($anio)) {
            $date = new \Datetime();
            $anio = $date->format("Y");
        }
    if (empty($slug)) {
        $fechaDesde = $anio."/01/01";
        $fechaDesde = new \DateTime($fechaDesde);
        $fechaDesde = $fechaDesde->format('Y/m/d');

        $fechaHasta = $anio."/12/31";
        $fechaHasta = new \DateTime($fechaHasta);
        $fechaHasta = $fechaHasta->format('Y/m/d');

        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t
                        FROM ExpedienteBundle:Tramite t 
                        WHERE t.fechaDestino >= :fechaDesde 
                        AND t.fechaDestino <= :fechaHasta
                        AND t.departamentoRm = :id
                        ORDER BY t.numeroTramite DESC
                        ');
        $consulta->setParameter('id', $id)
                 ->setParameter('fechaDesde', $fechaDesde)
                 ->setParameter('fechaHasta', $fechaHasta);
        
        $tramite = $consulta->getResult();   
    } else {
        $fechaDesde = $anio."/01/01";
        $fechaDesde = new \DateTime($fechaDesde);
        $fechaDesde = $fechaDesde->format('Y/m/d');

        $fechaHasta = $anio."/12/31";
        $fechaHasta = new \DateTime($fechaHasta);
        $fechaHasta = $fechaHasta->format('Y/m/d');

        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t
                        FROM ExpedienteBundle:Tramite t 
                        JOIN  t.tipoTramite tt
                        WHERE t.fechaDestino >= :fechaDesde 
                        AND t.fechaDestino <= :fechaHasta
                        AND t.departamentoRm = :id
                        AND tt.slug = :slug
                        ORDER BY t.numeroTramite DESC
                        ');
        $consulta->setParameter('id', $id)
                 ->setParameter('slug', $slug)
                 ->setParameter('fechaDesde', $fechaDesde)
                 ->setParameter('fechaHasta', $fechaHasta);
        
        $tramite = $consulta->getResult();  
    }          
        return $tramite;
    }

    
    /**
     * Encuentra los  tramites con TAREAS relacionados con el USUARIO
     * 
     * 
     */
  public function findByTarea($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT tra
                        FROM ExpedienteBundle:Tramite tra 
                        JOIN tra.tarea tarea
                        WHERE tarea.usuario= :id
                        AND tarea.realizada= :estado
                        ');
        $consulta->setParameter('id', $id);
        $consulta->setParameter('estado', false);
        
        $tramite = $consulta->getResult();           
                 
        return $tramite;
    }


    /**
     * Encuentra los  tramites con TAREAS relacionados con el USUARIO
     * 
     * 
     */
  public function findByTareaRealizada($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT tra
                        FROM ExpedienteBundle:Tramite tra JOIN tra.tarea tarea
                        WHERE tarea.usuario= :id
                        AND tarea.realizada= :estado
                        ');
        $consulta->setParameter('id', $id);
        $consulta->setParameter('estado', true);
        
        $tramite = $consulta->getResult();           
                 
        return $tramite;
    }

    /**
     * Encuentra los  TRAMITE de un usuario por departamento
     * 
     * 
     */
  public function findByUsuario($usuario, $anio = null)
  {
        $dpto = $usuario->getDepartamentoRm();

        if (empty($anio)) {
            $date = new \Datetime();
            $anio = $date->format("Y");
        }

        $fechaDesde = $anio."/01/01";
        $fechaDesde = new \DateTime($fechaDesde);
        $fechaDesde = $fechaDesde->format('Y/m/d');

        $fechaHasta = $anio."/12/31";
        $fechaHasta = new \DateTime($fechaHasta);
        $fechaHasta = $fechaHasta->format('Y/m/d');

        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT t
                        FROM ExpedienteBundle:Tramite t 
                        JOIN t.tarea tar 
                        WHERE t.fechaDestino >= :fechaDesde 
                        AND t.fechaDestino <= :fechaHasta
                        AND (t.departamentoRm = :d
                        AND tar.usuario = :u)
                        ORDER BY t.numeroTramite DESC
                        ');
        $consulta->setParameter('d', $dpto)
                 ->setParameter('u', $usuario)
                 ->setParameter('fechaDesde', $fechaDesde)
                 ->setParameter('fechaHasta', $fechaHasta);
        
        $tramite = $consulta->getResult();           
                 
        return $tramite;
    }
    
   /**----------------------REVISAR---------------------*/ 





      /**
     * Encuentra el ultimo tramite del expediente indicado
     *
     * 
     */
	public function findUltimo($expediente)
	{
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
        			   'SELECT t
                        FROM ExpedienteBundle:Tramite t JOIN t.expediente e
                        WHERE e.id= :id
                        ORDER BY t.id DESC
                        ');
        $consulta->setParameter('id', $expediente->getId());
        $consulta->setMaxResults(1);  
        $tramite = $consulta->getSingleResult();           
                 
        return $tramite;
    }


    
    public function findTramiteClasificacion($departamento , $clasificacion, $tipoTramite)
    {
        $em = $this->getEntityManager();
     

      $fechaDesde = new \DateTime('2013-01-01');
      $fechaHasta = new \DateTime('2016-01-01');

     $consulta = $em->createQuery(
           'SELECT t
            FROM ExpedienteBundle:Tramite t JOIN t.tipoTramite tt
            JOIN t.expediente e                        
            JOIN t.departamentoRm d
            JOIN e.clasificacion c
          WHERE t.departamentoRm= :id 
          AND e.clasificacion= :idc 
          AND t.fechaOrigen> :fec1 
          AND t.fechaOrigen< :fec2 
          AND  t.tipoTramite= :idr');
      $consulta->setParameter('id', $departamento);
      $consulta->setParameter('idc', $clasificacion);
      $consulta->setParameter('idr', $tipoTramite);
      $consulta->setParameter('fec1', $fechaDesde);
      $consulta->setParameter('fec2', $fechaHasta);
      $tramites = $consulta->getResult(); 
      return $tramites;
    }
}