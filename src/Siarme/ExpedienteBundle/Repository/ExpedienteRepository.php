<?php

namespace Siarme\ExpedienteBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ExpedienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpedienteRepository extends EntityRepository
{

    /**
     * Encuentra los EXPEDIENTE de la reparticion del USUARIO
     * 
     * 
     */
  public function findByReparticionPendientes($id)
  {
        $em = $this->getEntityManager();

                $consulta = $em->createQuery(
                 'SELECT e
                        FROM ExpedienteBundle:Expediente e 
                        JOIN e.movimiento mov
                        JOIN e.tipoExpediente t
                        WHERE mov.departamentoRm= :id
                        AND t.slug != :slug
                        AND e.tramite IS EMPTY  
                        ');
        $consulta->setParameter('id', $id)
                ->setParameter('slug', "exp_acuerdo");

        $expedientes = $consulta->getResult();           
                 
        return $expedientes;
    }

    /**
     * Encuentra los EXPEDIENTE de la reparticion del USUARIO
     * 
     * 
     */
  public function findAcuerdo($id,  $anio = null)
  {
        if (empty($anio)) {
            $date = new \Datetime();
            $anio = $date->format("Y");
        }

        $fechaDesde = $anio."/01/01";
        $fechaDesde = new \DateTime($fechaDesde);
        $fechaDesde = $fechaDesde->format('Y/m/d');

        $fechaHasta = $anio."/12/31";
        $fechaHasta = new \DateTime($fechaHasta);
        $fechaHasta = $fechaHasta->format('Y/m/d');

        $em = $this->getEntityManager();

        /** 
               $consulta = $em->createQuery(
                 'SELECT e
                        FROM ExpedienteBundle:Expediente e 
                        JOIN e.movimiento mov
                        JOIN e.tipoExpediente t
                        WHERE mov.departamentoRm= :id
                        AND e.fecha >= :fechaDesde 
                        AND e.fecha <= :fechaHasta
                        AND t.slug = :slug');
                $consulta->setParameter('id', $id)
                 ->setParameter('fechaDesde', $fechaDesde)
                 ->setParameter('fechaHasta', $fechaHasta)
                 ->setParameter('slug', "exp_acuerdo");
        */

        $consulta = $em->createQuery(
                 'SELECT e
                        FROM ExpedienteBundle:Expediente e 
                        JOIN e.tipoExpediente t
                        WHERE e.fecha >= :fechaDesde 
                        AND e.fecha <= :fechaHasta
                        AND t.slug = :slug');
        $consulta->setParameter('fechaDesde', $fechaDesde)
                 ->setParameter('fechaHasta', $fechaHasta)
                 ->setParameter('slug', "exp_acuerdo");

        $expedientes = $consulta->getResult();           
                 
        return $expedientes;
    }

    /**
     * Encuentra los EXPEDIENTE de la reparticion del USUARIO
     * 
     * 
     */
  public function findByReparticion($dpto, $anio = null)
  {
        if (empty($anio)) {
            $date = new \Datetime();
            $anio = "-".$date->format("Y")."-";
        }

        $em = $this->getEntityManager();

        $dps = ["dppr", "dpcbs"];
        if ( in_array($dpto->getSlug() , $dps)) {
            
            $consulta = $em->createQuery(
                     'SELECT e, mov
                            FROM ExpedienteBundle:Expediente e 
                            INNER JOIN e.tipoExpediente te
                            INNER JOIN e.movimiento mov
                            WHERE te.slug = :slug
                            AND mov.departamentoRm= :dpto 
                            AND (e.numeroGde LIKE :anio 
                            OR e.ccoo LIKE :anio)
                            ORDER BY e.numeroInterno DESC
                            ');
            $consulta->setParameter('dpto', $dpto)
                     ->setParameter('anio', '%'.$anio.'%')
                     ->setParameter('slug', "exp_ccoo");
            $expedientes = $consulta->getResult();  

        } else {

            $consulta = $em->createQuery(
                     'SELECT e, mov
                            FROM ExpedienteBundle:Expediente e 
                            INNER JOIN e.tipoExpediente te
                            INNER JOIN e.movimiento mov
                            WHERE mov.departamentoRm= :dpto
                            AND  (e.numeroGde LIKE :anio 
                            OR e.ccoo LIKE :anio )
                            AND (te.slug = :slug1 
                            OR te.slug = :slug2)
                            ORDER BY e.numeroInterno DESC
                            ');
            $consulta->setParameter('dpto', $dpto)
                     ->setParameter('anio', '%'.$anio.'%')
                     ->setParameter('slug1', "exp_ccoo")
                     ->setParameter('slug2', "exp_general");
            $expedientes = $consulta->getResult();  
        }
        return $expedientes;
    }

    /**
     * Encuentra los  tramites con TAREAS relacionados con el USUARIO
     * 
     * 
     */
  public function findByTarea($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT e
                        FROM ExpedienteBundle:Expediente e JOIN e.tarea tar
                        WHERE tar.usuario= :id
                        ');
        $consulta->setParameter('id', $id);
        $expediente = $consulta->getResult();           
                 
        return $expediente;
    }


    /**
     * Encuentra los  tramites con TAREAS relacionados con el USUARIO
     * 
     * 
     */
  public function findByTareaRealizada($id)
  {
        $em = $this->getEntityManager();

        $consulta = $em->createQuery(
                 'SELECT e
                        FROM ExpedienteBundle:Expediente e
                        JOIN e.tarea tarea
                        WHERE tarea.usuario= :id
                        AND tarea.realizada= :estado
                        ');
        $consulta->setParameter('id', $id);
        $consulta->setParameter('estado', true);
        
        $expedientes = $consulta->getResult();           
                 
        return $expedientes;
    }





/*--------------REVISAR--------------------------*/


     /**
     * Encuentra el los Expedientes por departamentoRm indicado
     *
     *  @param string $id El id del departamentoRm
     *  @return array
     */
     
    public function findExpediente($id = null, $transito = false)
    {
        $em = $this->getEntityManager();
        if ((!empty($id)) and ($transito)) {

        $consulta = $em->createQuery(
                    'SELECT e,  c, a, dr
                    FROM ExpedienteBundle:Expediente e 
                    JOIN e.tramite t 
                    JOIN e.clasificacion c
                    JOIN e.agente a
                    JOIN e.departamentoRm dr
                    WHERE dr.id = :id AND t.estado = :estado
                    ');
                $consulta->setParameter('id', $id);
                $consulta->setParameter('estado', true);

        } elseif (!empty($id)) {

                    $consulta = $em->createQuery(
                    'SELECT e, a, c, dr
                    FROM ExpedienteBundle:Expediente e 

                    JOIN e.agente a
                    JOIN e.clasificacion c
                    JOIN e.departamentoRm dr
                    WHERE dr.id = :id');
                    $consulta->setParameter('id', $id);
        } else {

                $consulta = $em->createQuery(
                    'SELECT e, t, a, c, dr
                    FROM ExpedienteBundle:Expediente e 
                    JOIN e.tramite t 
                    JOIN e.agente a
                    JOIN e.clasificacion c
                    JOIN e.departamentoRm dr'
                   );


        }

        $consulta->setMaxResults(100);
                
        return  $consulta->getResult();  
    }
    
    # BUSCA EXPEDIENTES POR ID AGENTE
     /**
     *  @param integer $id del Agente
     *  
     *  @return array
     */
    public function  findByAgente($id)
    {

        $em = $this->getEntityManager();

         $consulta = $em->createQuery(
            'SELECT e 
            FROM ExpedienteBundle:Expediente e 
            JOIN e.tramite t 
            JOIN e.agente a
             WHERE a.id = :id AND t.fechaOrigen > :fecha
             '
            );

        $consulta->setParameter('id', $id);
        // si estado de expediente es True => INICIADO si False=> CONCLUIDO
         $consulta->setParameter('fecha', new \DateTime('now - 365 days'));
         
                
        return  $consulta->getResult();  
    }


  # BUSCA EXPEDIENTES POR DEPARTAMENTO Y DOCUMENTO para EL MENU
     /**
     *  @param string $slugd y $slugdc El id de DepartamentoRm
     *  
     *  @return array
     */
    public function  findByDepartamentoAndDocumento($slugd, $slugdc, $transito = true)
    {

        $em = $this->getEntityManager();

         $consulta = $em->createQuery(
            'SELECT e, t, a, c, dr 
            FROM ExpedienteBundle:Expediente e 
            JOIN e.tramite t 
            JOIN t.documento doc
            JOIN e.agente a
            JOIN e.clasificacion c
            JOIN e.departamentoRm dr
             WHERE dr.slug = :slugd AND t.estado = :estado AND doc.slug = :slugdc
             '
            );

        $consulta->setParameter('slugd', $slugd);
        // si estado de expediente es True => INICIADO si False=> CONCLUIDO
         $consulta->setParameter('estado', true);
        $consulta->setParameter('slugdc', $slugdc);
         
                
        return  $consulta->getResult();  
    }

    # BUSCA EXPTS POR DEPARTAMENTO y CLASIFIACION 

     /**
     *  @param string $slugd y $slugdc El id de DepartamentoRm
     *  
     *  @return array
     */
    public function  findByDepartamentoAndClasificacion($slugd, $slugc , $transito = false)
    {
         $em = $this->getEntityManager();
        if ($transito){
             $consulta = $em->createQuery(
            'SELECT e, c, a, t, c, dr
            FROM ExpedienteBundle:Expediente e 
            JOIN e.agente a
            JOIN e.tramite t
            JOIN e.clasificacion c
            JOIN e.departamentoRm dr
             WHERE dr.slug = :slugd AND e.estado = :estado AND c.slug = :slugc'
            );

        $consulta->setParameter('slugd', $slugd);
        // si estado de expediente es True => INICIADO si False=> CONCLUIDO
        $consulta->setParameter('estado', true);
        $consulta->setParameter('slugc', $slugc);

        } else {
            $consulta = $em->createQuery(
            'SELECT e, c, a, c, dr
            FROM ExpedienteBundle:Expediente e 
            JOIN e.agente a
            JOIN e.clasificacion c
            JOIN e.departamentoRm dr
             WHERE dr.slug = :slugd AND c.slug = :slugc'
            );

        $consulta->setParameter('slugd', $slugd);
        // si estado de expediente es True => INICIADO si False=> CONCLUIDO
       // $consulta->setParameter('estado', true);
        $consulta->setParameter('slugc', $slugc);

        }
                        
        return  $consulta->getResult();  
    }

    /* advanced search */
    public function search($searchParam) {
        extract($searchParam);        
        $qb = $this->createQueryBuilder('e')
                ->leftJoin('e.agente', 'a')
                ->addSelect('a')
                ->leftJoin('e.departamentoRm', 'dp')
                ->addSelect('dp');

        if(!empty($keyword))
            $qb->andWhere('a.apellidoNombre like :keyword or a.dni like :keyword or e.extracto like :keyword')
                ->setParameter('keyword', '%'.$keyword.'%');
        if(!empty($ids))
            $qb->andWhere('c.id in (:ids)')->setParameter('ids', $ids);
        if(!empty($type))
            $qb->andWhere('c.type like :type')->setParameter('type', $type);
        if(!empty($cin))
            $qb->andWhere('p.cin = :cin')->setParameter('cin', $cin);
        if(!empty($user))
            $qb->andWhere('u.id = :user')->setParameter('user', $user);
        if(!empty($gender))
            $qb->andWhere('p.gender = :gender')->setParameter('gender', $gender);
        if(!empty($date))
            $qb->andWhere('p.created = :date')->setParameter('date', $date);
        if(!empty($sortBy)){
            $sortBy = in_array($sortBy, array('firstname', 'familyname', 'birthday')) ? $sortBy : 'id';
            $sortDir = ($sortDir == 'DESC') ? 'DESC' : 'ASC';
            $qb->orderBy('p.' . $sortBy, $sortDir);
        }
        if(!empty($perPage)) $qb->setFirstResult(($page - 1) * $perPage)->setMaxResults($perPage);

       return new Paginator($qb->getQuery());
    }

    public function counter() {
        $qb = $this->createQueryBuilder('c')->select('COUNT(c)');
        return $qb->getQuery()->getSingleScalarResult();
    }
}

